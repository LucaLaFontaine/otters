window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "otters", "modulename": "otters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "otters.import_config", "modulename": "otters", "qualname": "import_config", "kind": "function", "doc": "<p>MUST USE SINGLE QUOTES IN YAML FILES FOR BACKSLASHES TO WORK\nImport all config files from the supplied folder. Defaults to the root folder <br />\nAny files ending in 'config.yaml' or 'config.xlsx' will be treated. So you could have a formatting config called 'format.config.yaml'  </p>\n\n<p><strong>Parameters:</strong></p>\n\n<blockquote>\n  <p><strong>configFolder:</strong> <em>string, default: empty</em>  </p>\n  \n  <blockquote>\n    <p>The relative path to the config folder. </p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>recursive:</strong> <em>boolean, default: <code>True</code></em> </p>\n  \n  <blockquote>\n    <p>Returns all files in dir and sub-dirs if <code>True</code>. Only files in root dir if <code>False</code>.</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><em>*dict</em></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">configFolder</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.str2dt", "modulename": "otters", "qualname": "str2dt", "kind": "function", "doc": "<p>Finds the timestamp in a dataframe, translates it to_datetime, renames it \"Timestamp\", and sets it as the index\nBumps the index to the first column if it isn't a timestamp</p>\n\n<p>Parameters:\ndf: DataFrame, required\ntimeCol: string, Default: empty</p>\n\n<p>Returns: DataFrame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">timeCol</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">drop</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">datetime_args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.formatData", "modulename": "otters", "qualname": "formatData", "kind": "function", "doc": "<p>This will format an outputted excel file so it doesn't make your eyes bleed. <br />\nMost useful for outputting DataFrames to Excel. <br />\nStole it from StackOverflow. It's not super optimal but it's concise which I like.</p>\n\n<p><strong>Parameters:</strong>  </p>\n\n<blockquote>\n  <p><strong>wb_name: <em>str, Required</em></strong>  </p>\n  \n  <blockquote>\n    <p>The name of the file. Can be relative and prolly absolute</p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>sheet: <em>string, default: \"Sheet1\"</em></strong> </p>\n  \n  <blockquote>\n    <p>The name of the sheet. Leave blank if you didn't rename the sheet and it's the first/only one in the workbook.</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>None</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">wb_name</span>, </span><span class=\"param\"><span class=\"n\">sheet</span><span class=\"o\">=</span><span class=\"s1\">&#39;Sheet1&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive", "modulename": "otters.drive", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS", "modulename": "otters.drive.ExPS", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.ExPS", "modulename": "otters.drive.ExPS", "qualname": "ExPS", "kind": "class", "doc": "<p>The main object that all the ExPS data lives in.</p>\n"}, {"fullname": "otters.drive.ExPS.ExPS.config", "modulename": "otters.drive.ExPS", "qualname": "ExPS.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.ExPS.plant", "modulename": "otters.drive.ExPS", "qualname": "ExPS.plant", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.ExPS.graphs", "modulename": "otters.drive.ExPS", "qualname": "ExPS.graphs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.ExPS.getSQL", "modulename": "otters.drive.ExPS", "qualname": "ExPS.getSQL", "kind": "function", "doc": "<p>Meant specifically to get data from the loadwatch database or a db with that schema. <br />\nJust makes it easier to see what's going on.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.ExPS.getExcel", "modulename": "otters.drive.ExPS", "qualname": "ExPS.getExcel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.ExPS.createPPT", "modulename": "otters.drive.ExPS", "qualname": "ExPS.createPPT", "kind": "function", "doc": "<p>If this fails delete the folders in your python version at this address: <br />\nC:/Users/%USERNAME%/AppData/Local/Temp/gen_py</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.ExPS.savePPT", "modulename": "otters.drive.ExPS", "qualname": "ExPS.savePPT", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plant</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Graph", "modulename": "otters.drive.ExPS", "qualname": "Graph", "kind": "class", "doc": "<p>This is an extension of the Graph object in the vis.graph section. <br />\nBascially we're taking that object and adding to it. This keeps the main Graph object clean</p>\n", "bases": "otters.vis.graph.Graph"}, {"fullname": "otters.drive.ExPS.Graph.__init__", "modulename": "otters.drive.ExPS", "qualname": "Graph.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "otters.drive.ExPS.Graph.parent", "modulename": "otters.drive.ExPS", "qualname": "Graph.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.Graph.df", "modulename": "otters.drive.ExPS", "qualname": "Graph.df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.Graph.NPThreshold", "modulename": "otters.drive.ExPS", "qualname": "Graph.NPThreshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.Graph.numWeeks", "modulename": "otters.drive.ExPS", "qualname": "Graph.numWeeks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.Graph.unit", "modulename": "otters.drive.ExPS", "qualname": "Graph.unit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.Graph.cols", "modulename": "otters.drive.ExPS", "qualname": "Graph.cols", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.Graph.plot", "modulename": "otters.drive.ExPS", "qualname": "Graph.plot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.Graph.setDf", "modulename": "otters.drive.ExPS", "qualname": "Graph.setDf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Graph.setLowAchieved", "modulename": "otters.drive.ExPS", "qualname": "Graph.setLowAchieved", "kind": "function", "doc": "<p>Assign the lowest achieved number from the average for that column in the lowDf. </p>\n\n<p>Takes and returns nothing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Graph.setLowPercentage", "modulename": "otters.drive.ExPS", "qualname": "Graph.setLowPercentage", "kind": "function", "doc": "<p>Assign the lowest achieved percentage based on current production average and the lowest achieved nummber. </p>\n\n<p>Takes and returns nothing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Graph.setAvgProd", "modulename": "otters.drive.ExPS", "qualname": "Graph.setAvgProd", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rows</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Graph.getNRowAvg", "modulename": "otters.drive.ExPS", "qualname": "Graph.getNRowAvg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dfCol</span>, </span><span class=\"param\"><span class=\"n\">rows</span>, </span><span class=\"param\"><span class=\"n\">ascending</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Graph.setDowntimeEvents", "modulename": "otters.drive.ExPS", "qualname": "Graph.setDowntimeEvents", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dropEventsBelowNRows</span><span class=\"o\">=</span><span class=\"mi\">16</span>, </span><span class=\"param\"><span class=\"n\">mergeWithinHours</span><span class=\"o\">=</span><span class=\"mi\">12</span>, </span><span class=\"param\"><span class=\"n\">mergeClose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.DowntimeEvent", "modulename": "otters.drive.ExPS", "qualname": "DowntimeEvent", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.DowntimeEvent.__init__", "modulename": "otters.drive.ExPS", "qualname": "DowntimeEvent.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">dates</span></span>)</span>"}, {"fullname": "otters.drive.ExPS.DowntimeEvent.parent", "modulename": "otters.drive.ExPS", "qualname": "DowntimeEvent.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.DowntimeEvent.startTime", "modulename": "otters.drive.ExPS", "qualname": "DowntimeEvent.startTime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.DowntimeEvent.endTime", "modulename": "otters.drive.ExPS", "qualname": "DowntimeEvent.endTime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.DowntimeEvent.eventDurationHours", "modulename": "otters.drive.ExPS", "qualname": "DowntimeEvent.eventDurationHours", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.DowntimeEvent.setTargets", "modulename": "otters.drive.ExPS", "qualname": "DowntimeEvent.setTargets", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.DowntimeEvent.setAvgNonProd", "modulename": "otters.drive.ExPS", "qualname": "DowntimeEvent.setAvgNonProd", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Plot", "modulename": "otters.drive.ExPS", "qualname": "Plot", "kind": "class", "doc": "<p></p>\n", "bases": "otters.vis.graph.Plot"}, {"fullname": "otters.drive.ExPS.Plot.__init__", "modulename": "otters.drive.ExPS", "qualname": "Plot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span></span>)</span>"}, {"fullname": "otters.drive.ExPS.Plot.parent", "modulename": "otters.drive.ExPS", "qualname": "Plot.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ExPS.Plot.addLegendLabels", "modulename": "otters.drive.ExPS", "qualname": "Plot.addLegendLabels", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Plot.addAvgProdLine", "modulename": "otters.drive.ExPS", "qualname": "Plot.addAvgProdLine", "kind": "function", "doc": "<p>Add the avgProd and lowAcheived indicators to the graph\nCurrently the figure is not supplied/returned, that'll have to change for abstraction</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Plot.addLowAchievedLine", "modulename": "otters.drive.ExPS", "qualname": "Plot.addLowAchievedLine", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Plot.addWTAPSchedule", "modulename": "otters.drive.ExPS", "qualname": "Plot.addWTAPSchedule", "kind": "function", "doc": "<p>Add the specific WTAP production count indicators</p>\n\n<p>Currently the figure is not supplied/returned, that'll have to change for abstraction</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Plot.createDTEventLabel", "modulename": "otters.drive.ExPS", "qualname": "Plot.createDTEventLabel", "kind": "function", "doc": "<p>Create downtime labels downtime event (list of dicts)\nAdds them directly to the passed figure\nCurrently the figure is not returned, that'll have to change for abstraction</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Plot.granulizeData", "modulename": "otters.drive.ExPS", "qualname": "Plot.granulizeData", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">series</span>, </span><span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">end</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Plot.showLastYear", "modulename": "otters.drive.ExPS", "qualname": "Plot.showLastYear", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dfAll</span>, </span><span class=\"param\"><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">364</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Plot.showLastWeek", "modulename": "otters.drive.ExPS", "qualname": "Plot.showLastWeek", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dfAll</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ExPS.Plot.formatYAxisUnits", "modulename": "otters.drive.ExPS", "qualname": "Plot.formatYAxisUnits", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ppt_gen", "modulename": "otters.drive.ppt_gen", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ppt_gen.PPTGen", "modulename": "otters.drive.ppt_gen", "qualname": "PPTGen", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ppt_gen.PPTGen.__init__", "modulename": "otters.drive.ppt_gen", "qualname": "PPTGen.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span></span>)</span>"}, {"fullname": "otters.drive.ppt_gen.PPTGen.parent", "modulename": "otters.drive.ppt_gen", "qualname": "PPTGen.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ppt_gen.PPTGen.ppt", "modulename": "otters.drive.ppt_gen", "qualname": "PPTGen.ppt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ppt_gen.PPTGen.slideCtr", "modulename": "otters.drive.ppt_gen", "qualname": "PPTGen.slideCtr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.drive.ppt_gen.PPTGen.addSlide", "modulename": "otters.drive.ppt_gen", "qualname": "PPTGen.addSlide", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ppt_gen.PPTGen.savePPT", "modulename": "otters.drive.ppt_gen", "qualname": "PPTGen.savePPT", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pptTitle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.drive.ppt_gen.PPTGen.ExPSStyleName", "modulename": "otters.drive.ppt_gen", "qualname": "PPTGen.ExPSStyleName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model", "modulename": "otters.model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "otters.model.Regression", "modulename": "otters.model.Regression", "kind": "module", "doc": "<p>We're gonna use scikit-learn regression for now. This should be abstract enough to change the package out or build models from scratch wihtou haffecting the API</p>\n"}, {"fullname": "otters.model.Regression.LinearRegression", "modulename": "otters.model.Regression", "qualname": "LinearRegression", "kind": "class", "doc": "<p>LinearRegression class after sklearn's, but calculate t-statistics\nand p-values for model coefficients (betas).\nAdditional attributes available after .fit()\nare <code>t</code> and <code>p</code> which are of the shape (y.shape[1], X.shape[1])\nwhich is (n_features, n_coefs)\nThis class sets the intercept to 0 by default, since usually we include it\nin X.</p>\n", "bases": "sklearn.linear_model._base.LinearRegression"}, {"fullname": "otters.model.Regression.LinearRegression.__init__", "modulename": "otters.model.Regression", "qualname": "LinearRegression.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fit_intercept</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">copy_X</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "otters.model.Regression.LinearRegression.fit_intercept", "modulename": "otters.model.Regression", "qualname": "LinearRegression.fit_intercept", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.model.Regression.LinearRegression.copy_X", "modulename": "otters.model.Regression", "qualname": "LinearRegression.copy_X", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.model.Regression.LinearRegression.n_jobs", "modulename": "otters.model.Regression", "qualname": "LinearRegression.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.model.Regression.LinearRegression.fit", "modulename": "otters.model.Regression", "qualname": "LinearRegression.fit", "kind": "function", "doc": "<p>Fit linear model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : {array-like, sparse matrix} of shape (n_samples, n_features)\n    Training data.</p>\n\n<p>y : array-like of shape (n_samples,) or (n_samples, n_targets)\n    Target values. Will be cast to X's dtype if necessary.</p>\n\n<p>sample_weight : array-like of shape (n_samples,), default=None\n    Individual weights for each sample.</p>\n\n<pre><code>*New in version 0.17:*\nparameter *sample_weight* support to LinearRegression.\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>self : object\n    Fitted Estimator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.Regression.LinearRegression.set_fit_request", "modulename": "otters.model.Regression", "qualname": "LinearRegression.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.Regression.LinearRegression.set_score_request", "modulename": "otters.model.Regression", "qualname": "LinearRegression.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.Regression.Models", "modulename": "otters.model.Regression", "qualname": "Models", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "otters.model.Regression.Models.models", "modulename": "otters.model.Regression", "qualname": "Models.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.model.Regression.Models.regression", "modulename": "otters.model.Regression", "qualname": "Models.regression", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.Regression.Models.tabulateModels", "modulename": "otters.model.Regression", "qualname": "Models.tabulateModels", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.Regression.Model", "modulename": "otters.model.Regression", "qualname": "Model", "kind": "class", "doc": "<p>The generic model object. Gets associate to a list of models and parents specific models such as the Regression object</p>\n"}, {"fullname": "otters.model.Regression.Model.__init__", "modulename": "otters.model.Regression", "qualname": "Model.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "otters.model.Regression.Model.name", "modulename": "otters.model.Regression", "qualname": "Model.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.model.Regression.Model.x", "modulename": "otters.model.Regression", "qualname": "Model.x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.model.Regression.Model.y", "modulename": "otters.model.Regression", "qualname": "Model.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.model.Regression.Regression", "modulename": "otters.model.Regression", "qualname": "Regression", "kind": "class", "doc": "<p>The generic model object. Gets associate to a list of models and parents specific models such as the Regression object</p>\n", "bases": "Model"}, {"fullname": "otters.model.Regression.Regression.__init__", "modulename": "otters.model.Regression", "qualname": "Regression.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "otters.model.Regression.Regression.parent", "modulename": "otters.model.Regression", "qualname": "Regression.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.model.Regression.Regression.regress", "modulename": "otters.model.Regression", "qualname": "Regression.regress", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.Regression.Regression.getR2", "modulename": "otters.model.Regression", "qualname": "Regression.getR2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.Regression.Regression.getCVRMSE", "modulename": "otters.model.Regression", "qualname": "Regression.getCVRMSE", "kind": "function", "doc": "<p>Take the coefficient of variation of the residual.  </p>\n\n<p>Basically tells you the total error of the model against the actual</p>\n\n<p><strong>Parameters:</strong>  </p>\n\n<blockquote>\n  <p><strong>None</strong></p>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>float</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">just_baseline</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.Regression.Regression.stats", "modulename": "otters.model.Regression", "qualname": "Regression.stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.Regression.Regression.getCV", "modulename": "otters.model.Regression", "qualname": "Regression.getCV", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.Regression.Regression.to_frame", "modulename": "otters.model.Regression", "qualname": "Regression.to_frame", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">just_baseline</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">mapping</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.Regression.Regression.model_component_graph", "modulename": "otters.model.Regression", "qualname": "Regression.model_component_graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mapping</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Model Component Graph&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">just_baseline</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.Regression.Regression.getRegEquation", "modulename": "otters.model.Regression", "qualname": "Regression.getRegEquation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mapping</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.VirtualMeter", "modulename": "otters.model.VirtualMeter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "otters.model.VirtualMeter.VirtualMeter", "modulename": "otters.model.VirtualMeter", "qualname": "VirtualMeter", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "otters.model.VirtualMeter.VirtualMeter.__init__", "modulename": "otters.model.VirtualMeter", "qualname": "VirtualMeter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span></span>)</span>"}, {"fullname": "otters.model.VirtualMeter.VirtualMeter.df", "modulename": "otters.model.VirtualMeter", "qualname": "VirtualMeter.df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.model.VirtualMeter.VirtualMeter.AHUs", "modulename": "otters.model.VirtualMeter", "qualname": "VirtualMeter.AHUs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.model.VirtualMeter.VirtualMeter.cleanColNamesEMS", "modulename": "otters.model.VirtualMeter", "qualname": "VirtualMeter.cleanColNamesEMS", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filterWords</span><span class=\"o\">=</span><span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"o\">=</span><span class=\"s1\">&#39; - &#39;</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.VirtualMeter.VirtualMeter.splitEntities", "modulename": "otters.model.VirtualMeter", "qualname": "VirtualMeter.splitEntities", "kind": "function", "doc": "<p>Splits a df into seperate entities (i.e AHUs, chillers, etc) based on a common identifier.  </p>\n\n<p>Example: if you have a list of tags from AHUs 1-15, all with the prefix 'BIW AHU {number}' you can separate them by ahu number.  </p>\n\n<p>The func takes the id with '*' as a wildcard and tries each number from 1 - maxNum to get the tags associated to that number. \nThere should be a trailing space on the identifier as that's the complete term. </p>\n\n<p>There can be missing tag numbers, it'll ignore empty tags.</p>\n\n<p><strong>Parameters:</strong>  </p>\n\n<blockquote>\n  <p><strong>identifiers:</strong> <em>list of dictionaries, Required</em></p>\n</blockquote>\n\n<blockquote>\n  <p><strong>paddingDigits:</strong> <em>bool, default:</em> <code>False</code>  </p>\n  \n  <blockquote>\n    <p>Defines whether the numbers in the tags have 0-padding. Eg: 01, 02, etc.</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>list of DataFrames</strong></p>\n</blockquote>\n\n<p>Example:</p>\n\n<pre><code>identifiers = [\n    {'id':'Biw Ahu * ', 'maxNum':17} \n]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifiers</span>, </span><span class=\"param\"><span class=\"n\">paddingDigits</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.VirtualMeter.VirtualMeter.createAHU", "modulename": "otters.model.VirtualMeter", "qualname": "VirtualMeter.createAHU", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.model.VirtualMeter.AHU", "modulename": "otters.model.VirtualMeter", "qualname": "AHU", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "otters.model.VirtualMeter.AHU.__init__", "modulename": "otters.model.VirtualMeter", "qualname": "AHU.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">name</span></span>)</span>"}, {"fullname": "otters.model.VirtualMeter.AHU.parent", "modulename": "otters.model.VirtualMeter", "qualname": "AHU.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.model.VirtualMeter.AHU.df", "modulename": "otters.model.VirtualMeter", "qualname": "AHU.df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.model.VirtualMeter.AHU.name", "modulename": "otters.model.VirtualMeter", "qualname": "AHU.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.vis", "modulename": "otters.vis", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph", "modulename": "otters.vis.graph", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph.Graph", "modulename": "otters.vis.graph", "qualname": "Graph", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph.Graph.__init__", "modulename": "otters.vis.graph", "qualname": "Graph.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"n\">Empty</span> <span class=\"n\">DataFrame</span>\n<span class=\"n\">Columns</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n<span class=\"n\">Index</span><span class=\"p\">:</span> <span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "otters.vis.graph.Graph.config", "modulename": "otters.vis.graph", "qualname": "Graph.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph.Graph.show", "modulename": "otters.vis.graph", "qualname": "Graph.show", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.vis.graph.Plot", "modulename": "otters.vis.graph", "qualname": "Plot", "kind": "class", "doc": "<p></p>\n", "bases": "Graph"}, {"fullname": "otters.vis.graph.Plot.__init__", "modulename": "otters.vis.graph", "qualname": "Plot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span></span>)</span>"}, {"fullname": "otters.vis.graph.Plot.parent", "modulename": "otters.vis.graph", "qualname": "Plot.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph.Plot.config", "modulename": "otters.vis.graph", "qualname": "Plot.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph.Plot.df", "modulename": "otters.vis.graph", "qualname": "Plot.df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph.Plot.title", "modulename": "otters.vis.graph", "qualname": "Plot.title", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph.Plot.xTitle", "modulename": "otters.vis.graph", "qualname": "Plot.xTitle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph.Plot.yTitle", "modulename": "otters.vis.graph", "qualname": "Plot.yTitle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph.Plot.width", "modulename": "otters.vis.graph", "qualname": "Plot.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph.Plot.height", "modulename": "otters.vis.graph", "qualname": "Plot.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph.Plot.lineColours", "modulename": "otters.vis.graph", "qualname": "Plot.lineColours", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph.Plot.margin", "modulename": "otters.vis.graph", "qualname": "Plot.margin", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "otters.vis.graph.Plot.full_setup", "modulename": "otters.vis.graph", "qualname": "Plot.full_setup", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fig</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.vis.graph.Plot.createPlot", "modulename": "otters.vis.graph", "qualname": "Plot.createPlot", "kind": "function", "doc": "<p>Creates a plot in the EPS style. Most of this crap is formatting\nWe add here the trendline(s), the legend, x/y axes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fig</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.vis.graph.Plot.addLines", "modulename": "otters.vis.graph", "qualname": "Plot.addLines", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cols</span><span class=\"o\">=</span><span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.vis.graph.Plot.addAreaLines", "modulename": "otters.vis.graph", "qualname": "Plot.addAreaLines", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cols</span><span class=\"o\">=</span><span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">stack_group</span><span class=\"o\">=</span><span class=\"s1\">&#39;one&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=-</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.vis.graph.Plot.addScatter", "modulename": "otters.vis.graph", "qualname": "Plot.addScatter", "kind": "function", "doc": "<p>You're gonna need to add an x and y. You should be able to add 2 Ys, and so those are a list. With the Xs idk suck a lemon.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.vis.graph.Plot.formatXAxis", "modulename": "otters.vis.graph", "qualname": "Plot.formatXAxis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.vis.graph.Plot.timeFormatXAxis", "modulename": "otters.vis.graph", "qualname": "Plot.timeFormatXAxis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scaleTimestamps</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.vis.graph.Plot.formatYAxis", "modulename": "otters.vis.graph", "qualname": "Plot.formatYAxis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.vis.graph.Plot.boundYAxis", "modulename": "otters.vis.graph", "qualname": "Plot.boundYAxis", "kind": "function", "doc": "<p><strong>Should be replaced by the folloifing:</strong>\nself.fig.update_yaxes(autorange=\"max\", autorangeoptions_include=0)  </p>\n\n<p>Bounds the range of each y axis to the traces currently present on the plot\nThis is way too complicated, but I need to move on</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.vis.graph.Plot.scaleDTick", "modulename": "otters.vis.graph", "qualname": "Plot.scaleDTick", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.vis.graph.Plot.setYAxisRange", "modulename": "otters.vis.graph", "qualname": "Plot.setYAxisRange", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.vis.graph.Plot.createTimeline", "modulename": "otters.vis.graph", "qualname": "Plot.createTimeline", "kind": "function", "doc": "<p>Creates a standalone timeline from a supplied events DataFrame  </p>\n\n<p>Paramaters:\ndf: DataFrame, Required</p>\n\n<blockquote>\n  <p>Should be format: ['Timsetamp', 'Name']. <br />\n  It only takes the first 2 columns so you can put like a description or whatever after. Eventually a description will be rolled into hover text</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.vis.graph.Plot.sparklines", "modulename": "otters.vis.graph", "qualname": "Plot.sparklines", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cols</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">colWidth</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">yTitles</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle", "modulename": "otters.wrangle", "kind": "module", "doc": "<p>The wrangler sub module is for tools to 'wrangle' data, meaning to clean, organize, or otherwise make data useable</p>\n"}, {"fullname": "otters.wrangle.db_loader", "modulename": "otters.wrangle.db_loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "otters.wrangle.db_loader.create_db", "modulename": "otters.wrangle.db_loader", "qualname": "create_db", "kind": "function", "doc": "<p>Create an SQLite database if none exists. <br />\nDoes not open a connection.</p>\n\n<p><strong>Parameters:</strong></p>\n\n<blockquote>\n  <p><strong>db_file:</strong> <em>string, required</em>  </p>\n  \n  <blockquote>\n    <p>The path to where the db will be created. Can be relative or absolute path. </p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>None</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.db_loader.create_conn", "modulename": "otters.wrangle.db_loader", "qualname": "create_conn", "kind": "function", "doc": "<p>Create a connection (conn) to a SQLite database.  </p>\n\n<p><strong>Parameters:</strong></p>\n\n<blockquote>\n  <p><strong>db_file:</strong> <em>string, required</em>  </p>\n  \n  <blockquote>\n    <p>The path to the db. Can be relative or absolute path. </p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>SQLite Connection</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlite3</span><span class=\"o\">.</span><span class=\"n\">Connection</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.db_loader.upsert", "modulename": "otters.wrangle.db_loader", "qualname": "upsert", "kind": "function", "doc": "<p>Uploads data into a new or existing SQL table. <br />\nIf data exists it won't replace it, and if data doesn't exist it will inject it in. <br />\nCan create new columns, but not new Foreign or Primary Keys</p>\n\n<p><strong>Parameters:</strong></p>\n\n<blockquote>\n  <p><strong>conn:</strong> <em>SQLite Connection, required</em>  </p>\n  \n  <blockquote>\n    <p>The connection to the SQLite db  </p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>table_name:</strong> <em>string, required</em>  </p>\n  \n  <blockquote>\n    <p>Name of the new/existing table. </p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>df:</strong> <em>DataFrame, required</em></p>\n  \n  <blockquote>\n    <p>pd.DataFrame containing all data to be loaded. Must contain the primary key somewhere, idk if it has to be in the beginning </p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>primary_key:</strong> <em>String, default: <code>'id'</code></em></p>\n  \n  <blockquote>\n    <p>primary key of the SQL table. pretty sure this is required cause the funcion will break otherwise. \n    Not sure if this should be changed.</p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>PK_type:</strong> <em>String or List, default: <code>'INTEGER'</code></em></p>\n  \n  <blockquote>\n    <p>Pass in the primary key(s), which can be a string or multi-column list</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong> </p>\n\n<blockquote>\n  <p><strong>None</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">sqlite3</span><span class=\"o\">.</span><span class=\"n\">Connection</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">primary_key</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;id&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">PK_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;INTEGER&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.db_loader.load", "modulename": "otters.wrangle.db_loader", "qualname": "load", "kind": "function", "doc": "<p>Dumly loads a DataFrame into a new or existing table. <br />\nIf it loads into an existing table it will append to the table. <br />\nIf a datetime column is found in the DataFrame it will turn tha into a SQL-readable timestamp and make it the index\nNever mind the fact that SQL has a time format and I just didn't know that when I wrote this \nThis func is definitely useful because upsert takes a long time\nThis func is definitely useful because upsert takes a long time</p>\n\n<p><strong>Parameters:</strong></p>\n\n<blockquote>\n  <p><strong>conn:</strong> <em>SQLite Connection, required</em>  </p>\n  \n  <blockquote>\n    <p>The connection to the SQLite db  </p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>table_name:</strong> <em>string, required</em>  </p>\n  \n  <blockquote>\n    <p>Name of the new/existing table  </p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>df:</strong> <em>DataFrame, required</em></p>\n  \n  <blockquote>\n    <p>Pandas DataFrame containing all data to be loaded. Must contain the primary key somewhere, idk if it has to be in the beginning  </p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong> </p>\n\n<blockquote>\n  <p><strong>None</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">sqlite3</span><span class=\"o\">.</span><span class=\"n\">Connection</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.db_loader.dedupe", "modulename": "otters.wrangle.db_loader", "qualname": "dedupe", "kind": "function", "doc": "<p>Do not use.\nThis function de-duplicates rows in a SQLite database but I'm pretty sure it has a bug somewhere and idk where it is. <br />\nDownload the entire db and deduplicate it with pandas.  </p>\n\n<p>At some point Luca will change this to a funcion that takes your entire table into pandas chunks and dedupes the from there but he hasn't figure that out. <br />\nIf you need this functionality with chunking (your db would have to be like 10+ GB), then let Luca know.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">sqlite3</span><span class=\"o\">.</span><span class=\"n\">Connection</span>, </span><span class=\"param\"><span class=\"n\">dedupe_cols</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.db_loader.ts2str", "modulename": "otters.wrangle.db_loader", "qualname": "ts2str", "kind": "function", "doc": "<p>Turn a pd.datetime(I'm pretty sure) into a SQLite-readable string. <br />\nMost SQL flvaours have timestamps data types but sqlite3 does not.  </p>\n\n<p><strong>Parameters:</strong></p>\n\n<blockquote>\n  <p><strong>col:</strong> <em>pd.Series, required</em>  </p>\n  \n  <blockquote>\n    <p>The column object to be changed into a string. Pretty sure you can send a Series or DataFrame</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>pd.Series</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">col</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.db_loader.getNasaWeather", "modulename": "otters.wrangle.db_loader", "qualname": "getNasaWeather", "kind": "function", "doc": "<p>Get the weather at a given plant from Nasa. <br />\nAssumes said plant is in the db.  </p>\n\n<p><a href=\"https://power.larc.nasa.gov/#resources\">Parameters can be found here</a> <br />\nCheck the Resources &gt; Parameter Dictionary dropdown  </p>\n\n<p><strong>Parameters:</strong>  </p>\n\n<blockquote>\n  <p><strong>plant:</strong> <em>str, required</em>  </p>\n  \n  <blockquote>\n    <p>The name of the plant in the database  </p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>dates:</strong> <em>list of dates, default: <code>[today-timedelta(days=365), today()]</code></em>  </p>\n  \n  <blockquote>\n    <p>Follows format: [start_date, end_date]. Pretty sure it can be a python date, a pd date, but not a string  </p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>params:</strong> <em>list of strs, default: <code>['T2M', 'RH2M']</code></em>  </p>\n  \n  <blockquote>\n    <p>The type of data you want to receive from NASA. These can be found in the resources section of the Power LARC website.\n    default: [temperature_at_2_meters, relative_humidity_at_2_meters]  </p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>type:</strong> <em>String, default: <code>'Daily'</code></em>  </p>\n  \n  <blockquote>\n    <p>The frequency of the data. Pretty sure the options are <code>Daily</code> and <code>Hourly</code></p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>units:</strong> <em>String, default: <code>'C'</code></em>  </p>\n  \n  <blockquote>\n    <p>The units for temperatures. Only works for T2M right now. Can be <code>'C'</code> or <code>'F'</code>  </p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>db_loc:</strong> <em>String, default: <code>\"Z:\\Data Governance\\Databases\\leidos_meta.db\"</code></em>  </p>\n  \n  <blockquote>\n    <p>Path to the database with plant coordinates</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>pd.DataFrame</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">plant</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dates</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2024</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">926913</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2025</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">926913</span><span class=\"p\">)]</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;T2M&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;RH2M&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;Daily&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">&#39;C&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">db_loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;Z:</span><span class=\"se\">\\\\</span><span class=\"s1\">Data Governance</span><span class=\"se\">\\\\</span><span class=\"s1\">Databases</span><span class=\"se\">\\\\</span><span class=\"s1\">leidos_meta.db&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">coords</span><span class=\"o\">=</span><span class=\"p\">[]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.file_loader", "modulename": "otters.wrangle.file_loader", "kind": "module", "doc": "<p>The file_loader module provides functions used to load data from files (excel, csv, pdf, etc) or into files.</p>\n"}, {"fullname": "otters.wrangle.file_loader.replace_backslashes_in_dict", "modulename": "otters.wrangle.file_loader", "qualname": "replace_backslashes_in_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dictionary</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.file_loader.import_config", "modulename": "otters.wrangle.file_loader", "qualname": "import_config", "kind": "function", "doc": "<p>MUST USE SINGLE QUOTES IN YAML FILES FOR BACKSLASHES TO WORK\nImport all config files from the supplied folder. Defaults to the root folder <br />\nAny files ending in 'config.yaml' or 'config.xlsx' will be treated. So you could have a formatting config called 'format.config.yaml'  </p>\n\n<p><strong>Parameters:</strong></p>\n\n<blockquote>\n  <p><strong>configFolder:</strong> <em>string, default: empty</em>  </p>\n  \n  <blockquote>\n    <p>The relative path to the config folder. </p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>recursive:</strong> <em>boolean, default: <code>True</code></em> </p>\n  \n  <blockquote>\n    <p>Returns all files in dir and sub-dirs if <code>True</code>. Only files in root dir if <code>False</code>.</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><em>*dict</em></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">configFolder</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.file_loader.getFiles", "modulename": "otters.wrangle.file_loader", "qualname": "getFiles", "kind": "function", "doc": "<p>Get list of all files in a supplied path. Can pass file types  </p>\n\n<p><strong>Parameters:</strong>  </p>\n\n<blockquote>\n  <p><strong>path: <em>string, default: empty</em></strong>  </p>\n  \n  <blockquote>\n    <p>Pass a relative or absolute path</p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>recursive: <em>bool, default: False</em></strong>  </p>\n  \n  <blockquote>\n    <p>If True search recursively, meaning it will search the folder supplied and any subfolders.</p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>fileTypes: <em>list, default: empty list</em></strong>  </p>\n  \n  <blockquote>\n    <p>Example: ['.xlsx', '.xls']</p>\n  </blockquote>\n</blockquote>\n\n<p><a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Click here for more info</a></p>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>list</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;*&#39;</span>, </span><span class=\"param\"><span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">fileTypes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.file_loader.getExcelDFs", "modulename": "otters.wrangle.file_loader", "qualname": "getExcelDFs", "kind": "function", "doc": "<p>Import all Excel files from a path into a list of DataFrames  </p>\n\n<p><strong>Parameters:</strong></p>\n\n<blockquote>\n  <p><strong>path: <em>string, default: \"/</em>\"*</strong>  </p>\n  \n  <blockquote>\n    <p>Pass a relative or absolute path</p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>recursive: <em>bool, default: False</em></strong>  </p>\n  \n  <blockquote>\n    <p>If True search recursively, meaning it will search the folder supplied and any subfolders.</p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>verbose: <em>bool, default: False</em></strong>  </p>\n  \n  <blockquote>\n    <p>If True prints each file as it's being imported.</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>list of DataFrames</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;*&#39;</span>, </span><span class=\"param\"><span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.file_loader.formatData", "modulename": "otters.wrangle.file_loader", "qualname": "formatData", "kind": "function", "doc": "<p>This will format an outputted excel file so it doesn't make your eyes bleed. <br />\nMost useful for outputting DataFrames to Excel. <br />\nStole it from StackOverflow. It's not super optimal but it's concise which I like.</p>\n\n<p><strong>Parameters:</strong>  </p>\n\n<blockquote>\n  <p><strong>wb_name: <em>str, Required</em></strong>  </p>\n  \n  <blockquote>\n    <p>The name of the file. Can be relative and prolly absolute</p>\n  </blockquote>\n</blockquote>\n\n<blockquote>\n  <p><strong>sheet: <em>string, default: \"Sheet1\"</em></strong> </p>\n  \n  <blockquote>\n    <p>The name of the sheet. Leave blank if you didn't rename the sheet and it's the first/only one in the workbook.</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>None</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">wb_name</span>, </span><span class=\"param\"><span class=\"n\">sheet</span><span class=\"o\">=</span><span class=\"s1\">&#39;Sheet1&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.file_loader.save2xl", "modulename": "otters.wrangle.file_loader", "qualname": "save2xl", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">file</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sheet</span><span class=\"o\">=</span><span class=\"s1\">&#39;Data&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">startCell</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">visible</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.file_loader.standardize_num_format", "modulename": "otters.wrangle.file_loader", "qualname": "standardize_num_format", "kind": "function", "doc": "<p>Undocumented\nSource: C:/Users/LucaLafontaine/AKONOVIA/EMO - Documents/002-ALCOVI/22-673 VSL - Ajustement Lufa/1-Intrant/Factures/\u00c9nergir/read_JCI_data.ipynb\nTHis is used internally and just for the invoice reading (energir) functions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.file_loader.get_table_gaz", "modulename": "otters.wrangle.file_loader", "qualname": "get_table_gaz", "kind": "function", "doc": "<p>Undocumented\nSource: C:/Users/LucaLafontaine/AKONOVIA/EMO - Documents/002-ALCOVI/22-673 VSL - Ajustement Lufa/1-Intrant/Factures/\u00c9nergir/read_JCI_data.ipynb\nUntested in this environment. Want to se if having it here will make development faster</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_name</span>, </span><span class=\"param\"><span class=\"n\">resample</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.file_loader.get_table_tarif_M", "modulename": "otters.wrangle.file_loader", "qualname": "get_table_tarif_M", "kind": "function", "doc": "<p>Undocumented\nSource: C:/Users/LucaLafontaine/AKONOVIA/EMO - Documents/002-ALCOVI/22-673 VSL - Ajustement Lufa/1-Intrant/Factures/\u00c9nergir/read_JCI_data.ipynb\nUntested in this environment. Want to se if having it here will make development faster</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_name</span>, </span><span class=\"param\"><span class=\"n\">resample</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics", "modulename": "otters.wrangle.psychrometrics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "otters.wrangle.psychrometrics.ZERO_FAHRENHEIT_AS_RANKINE", "modulename": "otters.wrangle.psychrometrics", "qualname": "ZERO_FAHRENHEIT_AS_RANKINE", "kind": "variable", "doc": "<p>float: Zero degree Fahrenheit (\u00b0F) expressed as degree Rankine (\u00b0R)</p>\n\n<p>Units:\n    \u00b0R</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 39</p>\n", "default_value": "459.67"}, {"fullname": "otters.wrangle.psychrometrics.ZERO_CELSIUS_AS_KELVIN", "modulename": "otters.wrangle.psychrometrics", "qualname": "ZERO_CELSIUS_AS_KELVIN", "kind": "variable", "doc": "<p>float: Zero degree Celsius (\u00b0C) expressed as Kelvin (K)</p>\n\n<p>Units:\n    K</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 39</p>\n", "default_value": "273.15"}, {"fullname": "otters.wrangle.psychrometrics.R_DA_IP", "modulename": "otters.wrangle.psychrometrics", "qualname": "R_DA_IP", "kind": "variable", "doc": "<p>float: Universal gas constant for dry air (IP version)</p>\n\n<p>Units:\n    ft lb_Force lb_DryAir\u207b\u00b9 R\u207b\u00b9</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1</p>\n", "default_value": "53.35"}, {"fullname": "otters.wrangle.psychrometrics.R_DA_SI", "modulename": "otters.wrangle.psychrometrics", "qualname": "R_DA_SI", "kind": "variable", "doc": "<p>float: Universal gas constant for dry air (SI version)</p>\n\n<p>Units:\n    J kg_DryAir\u207b\u00b9 K\u207b\u00b9</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1</p>\n", "default_value": "287.042"}, {"fullname": "otters.wrangle.psychrometrics.MAX_ITER_COUNT", "modulename": "otters.wrangle.psychrometrics", "qualname": "MAX_ITER_COUNT", "kind": "variable", "doc": "<p>int: Maximum number of iterations before exiting while loops.</p>\n", "default_value": "100"}, {"fullname": "otters.wrangle.psychrometrics.MIN_HUM_RATIO", "modulename": "otters.wrangle.psychrometrics", "qualname": "MIN_HUM_RATIO", "kind": "variable", "doc": "<p>float: Minimum acceptable humidity ratio used/returned by any functions.\nAny value above 0 or below the MIN_HUM_RATIO will be reset to this value.</p>\n", "default_value": "1e-07"}, {"fullname": "otters.wrangle.psychrometrics.FREEZING_POINT_WATER_IP", "modulename": "otters.wrangle.psychrometrics", "qualname": "FREEZING_POINT_WATER_IP", "kind": "variable", "doc": "<p>float: Freezing point of water in Fahrenheit.</p>\n", "default_value": "32.0"}, {"fullname": "otters.wrangle.psychrometrics.FREEZING_POINT_WATER_SI", "modulename": "otters.wrangle.psychrometrics", "qualname": "FREEZING_POINT_WATER_SI", "kind": "variable", "doc": "<p>float: Freezing point of water in Celsius.</p>\n", "default_value": "0.0"}, {"fullname": "otters.wrangle.psychrometrics.TRIPLE_POINT_WATER_IP", "modulename": "otters.wrangle.psychrometrics", "qualname": "TRIPLE_POINT_WATER_IP", "kind": "variable", "doc": "<p>float: Triple point of water in Fahrenheit.</p>\n", "default_value": "32.018"}, {"fullname": "otters.wrangle.psychrometrics.TRIPLE_POINT_WATER_SI", "modulename": "otters.wrangle.psychrometrics", "qualname": "TRIPLE_POINT_WATER_SI", "kind": "variable", "doc": "<p>float: Triple point of water in Celsius.</p>\n", "default_value": "0.01"}, {"fullname": "otters.wrangle.psychrometrics.UnitSystem", "modulename": "otters.wrangle.psychrometrics", "qualname": "UnitSystem", "kind": "class", "doc": "<p>Private class not exposed used to set automatic enumeration values.</p>\n", "bases": "enum.Enum"}, {"fullname": "otters.wrangle.psychrometrics.UnitSystem.IP", "modulename": "otters.wrangle.psychrometrics", "qualname": "UnitSystem.IP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;UnitSystem.IP: 1&gt;"}, {"fullname": "otters.wrangle.psychrometrics.UnitSystem.SI", "modulename": "otters.wrangle.psychrometrics", "qualname": "UnitSystem.SI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;UnitSystem.SI: 2&gt;"}, {"fullname": "otters.wrangle.psychrometrics.IP", "modulename": "otters.wrangle.psychrometrics", "qualname": "IP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;UnitSystem.IP: 1&gt;"}, {"fullname": "otters.wrangle.psychrometrics.SI", "modulename": "otters.wrangle.psychrometrics", "qualname": "SI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;UnitSystem.SI: 2&gt;"}, {"fullname": "otters.wrangle.psychrometrics.PSYCHROLIB_UNITS", "modulename": "otters.wrangle.psychrometrics", "qualname": "PSYCHROLIB_UNITS", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "otters.wrangle.psychrometrics.PSYCHROLIB_TOLERANCE", "modulename": "otters.wrangle.psychrometrics", "qualname": "PSYCHROLIB_TOLERANCE", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.0"}, {"fullname": "otters.wrangle.psychrometrics.SetUnitSystem", "modulename": "otters.wrangle.psychrometrics", "qualname": "SetUnitSystem", "kind": "function", "doc": "<p>Set the system of units to use (SI or IP).</p>\n\n<p>Args:\n    Units: string indicating the system of units chosen (SI or IP)</p>\n\n<p>Notes:\n    This function <em>HAS TO BE CALLED</em> before the library can be used</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Units</span><span class=\"p\">:</span> <span class=\"n\">otters</span><span class=\"o\">.</span><span class=\"n\">wrangle</span><span class=\"o\">.</span><span class=\"n\">psychrometrics</span><span class=\"o\">.</span><span class=\"n\">UnitSystem</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetUnitSystem", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetUnitSystem", "kind": "function", "doc": "<p>Return system of units in use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">otters</span><span class=\"o\">.</span><span class=\"n\">wrangle</span><span class=\"o\">.</span><span class=\"n\">psychrometrics</span><span class=\"o\">.</span><span class=\"n\">UnitSystem</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.isIP", "modulename": "otters.wrangle.psychrometrics", "qualname": "isIP", "kind": "function", "doc": "<p>Check whether the system in use is IP or SI.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetTRankineFromTFahrenheit", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetTRankineFromTFahrenheit", "kind": "function", "doc": "<p>Utility function to convert temperature to degree Rankine (\u00b0R)\ngiven temperature in degree Fahrenheit (\u00b0F).</p>\n\n<p>Args:\n    TRankine: Temperature in degree Fahrenheit (\u00b0F)</p>\n\n<p>Returns:\n    Temperature in degree Rankine (\u00b0R)</p>\n\n<p>Reference:\n    Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3</p>\n\n<p>Notes:\n    Exact conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TFahrenheit</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetTFahrenheitFromTRankine", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetTFahrenheitFromTRankine", "kind": "function", "doc": "<p>Utility function to convert temperature to degree Fahrenheit (\u00b0F)\ngiven temperature in degree Rankine (\u00b0R).</p>\n\n<p>Args:\n    TRankine: Temperature in degree Rankine (\u00b0R)</p>\n\n<p>Returns:\n    Temperature in degree Fahrenheit (\u00b0F)</p>\n\n<p>Reference:\n    Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3</p>\n\n<p>Notes:\n    Exact conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TRankine</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetTKelvinFromTCelsius", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetTKelvinFromTCelsius", "kind": "function", "doc": "<p>Utility function to convert temperature to Kelvin (K)\ngiven temperature in degree Celsius (\u00b0C).</p>\n\n<p>Args:\n    TCelsius: Temperature in degree Celsius (\u00b0C)</p>\n\n<p>Returns:\n    Temperature in Kelvin (K)</p>\n\n<p>Reference:\n    Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3</p>\n\n<p>Notes:\n    Exact conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TCelsius</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetTCelsiusFromTKelvin", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetTCelsiusFromTKelvin", "kind": "function", "doc": "<p>Utility function to convert temperature to degree Celsius (\u00b0C)\ngiven temperature in Kelvin (K).</p>\n\n<p>Args:\n    TKelvin: Temperature in Kelvin (K)</p>\n\n<p>Returns:\n    Temperature in degree Celsius (\u00b0C)</p>\n\n<p>Reference:\n    Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3</p>\n\n<p>Notes:\n    Exact conversion.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TKelvin</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetTWetBulbFromTDewPoint", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetTWetBulbFromTDewPoint", "kind": "function", "doc": "<p>Return wet-bulb temperature given dry-bulb temperature, dew-point temperature, and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    TDewPoint : Dew-point temperature in \u00b0F [IP] or \u00b0C [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Wet-bulb temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">TDewPoint</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetTWetBulbFromRelHum", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetTWetBulbFromRelHum", "kind": "function", "doc": "<p>Return wet-bulb temperature given dry-bulb temperature, relative humidity, and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    RelHum : Relative humidity in range [0, 1]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Wet-bulb temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">RelHum</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetRelHumFromTDewPoint", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetRelHumFromTDewPoint", "kind": "function", "doc": "<p>Return relative humidity given dry-bulb temperature and dew-point temperature.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    TDewPoint : Dew-point temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Returns:\n    Relative humidity in range [0, 1]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 22</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">TDewPoint</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetRelHumFromTWetBulb", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetRelHumFromTWetBulb", "kind": "function", "doc": "<p>Return relative humidity given dry-bulb temperature, wet bulb temperature and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    TWetBulb : Wet-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Relative humidity in range [0, 1]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">TWetBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetTDewPointFromRelHum", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetTDewPointFromRelHum", "kind": "function", "doc": "<p>Return dew-point temperature given dry-bulb temperature and relative humidity.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    RelHum: Relative humidity in range [0, 1]</p>\n\n<p>Returns:\n    Dew-point temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">RelHum</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetTDewPointFromTWetBulb", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetTDewPointFromTWetBulb", "kind": "function", "doc": "<p>Return dew-point temperature given dry-bulb temperature, wet-bulb temperature, and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    TWetBulb : Wet-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Dew-point temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">TWetBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetVapPresFromRelHum", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetVapPresFromRelHum", "kind": "function", "doc": "<p>Return partial pressure of water vapor as a function of relative humidity and temperature.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    RelHum : Relative humidity in range [0, 1]</p>\n\n<p>Returns:\n    Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">RelHum</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetRelHumFromVapPres", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetRelHumFromVapPres", "kind": "function", "doc": "<p>Return relative humidity given dry-bulb temperature and vapor pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    VapPres: Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Relative humidity in range [0, 1]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">VapPres</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.dLnPws_", "modulename": "otters.wrangle.psychrometrics", "qualname": "dLnPws_", "kind": "function", "doc": "<p>Helper function returning the derivative of the natural log of the saturation vapor pressure \nas a function of dry-bulb temperature.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Returns:\n    Derivative of natural log of vapor pressure of saturated air in Psi [IP] or Pa [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5 &amp; 6</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetTDewPointFromVapPres", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetTDewPointFromVapPres", "kind": "function", "doc": "<p>Return dew-point temperature given dry-bulb temperature and vapor pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    VapPres: Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Dew-point temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 5 and 6</p>\n\n<p>Notes:\n    The dew point temperature is solved by inverting the equation giving water vapor pressure\n    at saturation from temperature rather than using the regressions provided\n    by ASHRAE (eqn. 37 and 38) which are much less accurate and have a\n    narrower range of validity.\n    The Newton-Raphson (NR) method is used on the logarithm of water vapour\n    pressure as a function of temperature, which is a very smooth function\n    Convergence is usually achieved in 3 to 5 iterations. \n    TDryBulb is not really needed here, just used for convenience.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">VapPres</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetVapPresFromTDewPoint", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetVapPresFromTDewPoint", "kind": "function", "doc": "<p>Return vapor pressure given dew point temperature.</p>\n\n<p>Args:\n    TDewPoint : Dew-point temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Returns:\n    Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDewPoint</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetTWetBulbFromHumRatio", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetTWetBulbFromHumRatio", "kind": "function", "doc": "<p>Return wet-bulb temperature given dry-bulb temperature, humidity ratio, and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    HumRatio : Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Wet-bulb temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 solved for Tstar</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">HumRatio</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetHumRatioFromTWetBulb", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetHumRatioFromTWetBulb", "kind": "function", "doc": "<p>Return humidity ratio given dry-bulb temperature, wet-bulb temperature, and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    TWetBulb : Wet-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">TWetBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetHumRatioFromRelHum", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetHumRatioFromRelHum", "kind": "function", "doc": "<p>Return humidity ratio given dry-bulb temperature, relative humidity, and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    RelHum : Relative humidity in range [0, 1]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">RelHum</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetRelHumFromHumRatio", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetRelHumFromHumRatio", "kind": "function", "doc": "<p>Return relative humidity given dry-bulb temperature, humidity ratio, and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    HumRatio : Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Relative humidity in range [0, 1]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">HumRatio</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetHumRatioFromTDewPoint", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetHumRatioFromTDewPoint", "kind": "function", "doc": "<p>Return humidity ratio given dew-point temperature and pressure.</p>\n\n<p>Args:\n    TDewPoint : Dew-point temperature in \u00b0F [IP] or \u00b0C [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 13</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDewPoint</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetTDewPointFromHumRatio", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetTDewPointFromHumRatio", "kind": "function", "doc": "<p>Return dew-point temperature given dry-bulb temperature, humidity ratio, and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    HumRatio : Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Dew-point temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">HumRatio</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetHumRatioFromVapPres", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetHumRatioFromVapPres", "kind": "function", "doc": "<p>Return humidity ratio given water vapor pressure and atmospheric pressure.</p>\n\n<p>Args:\n    VapPres : Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 20</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">VapPres</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetVapPresFromHumRatio", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetVapPresFromHumRatio", "kind": "function", "doc": "<p>Return vapor pressure given humidity ratio and pressure.</p>\n\n<p>Args:\n    HumRatio : Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 20 solved for pw</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">HumRatio</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetSpecificHumFromHumRatio", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetSpecificHumFromHumRatio", "kind": "function", "doc": "<p>Return the specific humidity from humidity ratio (aka mixing ratio).</p>\n\n<p>Args:\n    HumRatio : Humidity ratio in lb_H\u2082O lb_Dry_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Dry_Air\u207b\u00b9 [SI]</p>\n\n<p>Returns:\n    Specific humidity in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">HumRatio</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetHumRatioFromSpecificHum", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetHumRatioFromSpecificHum", "kind": "function", "doc": "<p>Return the humidity ratio (aka mixing ratio) from specific humidity.</p>\n\n<p>Args:\n    SpecificHum : Specific humidity in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]</p>\n\n<p>Returns:\n    Humidity ratio in lb_H\u2082O lb_Dry_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Dry_Air\u207b\u00b9 [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b (solved for humidity ratio)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">SpecificHum</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetDryAirEnthalpy", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetDryAirEnthalpy", "kind": "function", "doc": "<p>Return dry-air enthalpy given dry-bulb temperature.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Returns:\n    Dry air enthalpy in Btu lb\u207b\u00b9 [IP] or J kg\u207b\u00b9 [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 28</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetDryAirDensity", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetDryAirDensity", "kind": "function", "doc": "<p>Return dry-air density given dry-bulb temperature and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Dry air density in lb ft\u207b\u00b3 [IP] or kg m\u207b\u00b3 [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1</p>\n\n<p>Notes:\n    Eqn 14 for the perfect gas relationship for dry air.\n    Eqn 1 for the universal gas constant.\n    The factor 144 in IP is for the conversion of Psi = lb in\u207b\u00b2 to lb ft\u207b\u00b2.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetDryAirVolume", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetDryAirVolume", "kind": "function", "doc": "<p>Return dry-air volume given dry-bulb temperature and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Dry air volume in ft\u00b3 lb\u207b\u00b9 [IP] or in m\u00b3 kg\u207b\u00b9 [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1</p>\n\n<p>Notes:\n    Eqn 14 for the perfect gas relationship for dry air.\n    Eqn 1 for the universal gas constant.\n    The factor 144 in IP is for the conversion of Psi = lb in\u207b\u00b2 to lb ft\u207b\u00b2.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetTDryBulbFromEnthalpyAndHumRatio", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetTDryBulbFromEnthalpyAndHumRatio", "kind": "function", "doc": "<p>Return dry bulb temperature from enthalpy and humidity ratio.</p>\n\n<p>Args:\n    MoistAirEnthalpy : Moist air enthalpy in Btu lb\u207b\u00b9 [IP] or J kg\u207b\u00b9\n    HumRatio : Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]</p>\n\n<p>Returns:\n    Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30</p>\n\n<p>Notes:\n    Based on the <code>GetMoistAirEnthalpy</code> function, rearranged for temperature.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">MoistAirEnthalpy</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">HumRatio</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetHumRatioFromEnthalpyAndTDryBulb", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetHumRatioFromEnthalpyAndTDryBulb", "kind": "function", "doc": "<p>Return humidity ratio from enthalpy and dry-bulb temperature.</p>\n\n<p>Args:\n    MoistAirEnthalpy : Moist air enthalpy in Btu lb\u207b\u00b9 [IP] or J kg\u207b\u00b9\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Returns:\n    Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30.</p>\n\n<p>Notes:\n    Based on the <code>GetMoistAirEnthalpy</code> function, rearranged for humidity ratio.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">MoistAirEnthalpy</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetSatVapPres", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetSatVapPres", "kind": "function", "doc": "<p>Return saturation vapor pressure given dry-bulb temperature.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Returns:\n    Vapor pressure of saturated air in Psi [IP] or Pa [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5 &amp; 6\n    Important note: the ASHRAE formulae are defined above and below the freezing point but have\n    a discontinuity at the freezing point. This is a small inaccuracy on ASHRAE's part: the formulae\n    should be defined above and below the triple point of water (not the feezing point) in which case\n    the discontinuity vanishes. It is essential to use the triple point of water otherwise function\n    GetTDewPointFromVapPres, which inverts the present function, does not converge properly around\n    the freezing point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetSatHumRatio", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetSatHumRatio", "kind": "function", "doc": "<p>Return humidity ratio of saturated air given dry-bulb temperature and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Humidity ratio of saturated air in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36, solved for W</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetSatAirEnthalpy", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetSatAirEnthalpy", "kind": "function", "doc": "<p>Return saturated air enthalpy given dry-bulb temperature and pressure.</p>\n\n<p>Args:\n    TDryBulb: Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    Pressure: Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Saturated air enthalpy in Btu lb\u207b\u00b9 [IP] or J kg\u207b\u00b9 [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetVaporPressureDeficit", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetVaporPressureDeficit", "kind": "function", "doc": "<p>Return Vapor pressure deficit given dry-bulb temperature, humidity ratio, and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    HumRatio : Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Vapor pressure deficit in Psi [IP] or Pa [SI]</p>\n\n<p>Reference:\n    Oke (1987) eqn 2.13a</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">HumRatio</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetDegreeOfSaturation", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetDegreeOfSaturation", "kind": "function", "doc": "<p>Return the degree of saturation (i.e humidity ratio of the air / humidity ratio of the air at saturation\nat the same temperature and pressure) given dry-bulb temperature, humidity ratio, and atmospheric pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    HumRatio : Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Degree of saturation in arbitrary unit</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2009) ch. 1 eqn 12</p>\n\n<p>Notes:\n    This definition is absent from the 2017 Handbook. Using 2009 version instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">HumRatio</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetMoistAirEnthalpy", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetMoistAirEnthalpy", "kind": "function", "doc": "<p>Return moist air enthalpy given dry-bulb temperature and humidity ratio.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    HumRatio : Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]</p>\n\n<p>Returns:\n    Moist air enthalpy in Btu lb\u207b\u00b9 [IP] or J kg\u207b\u00b9</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">HumRatio</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetMoistAirVolume", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetMoistAirVolume", "kind": "function", "doc": "<p>Return moist air specific volume given dry-bulb temperature, humidity ratio, and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    HumRatio : Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Specific volume of moist air in ft\u00b3 lb\u207b\u00b9 of dry air [IP] or in m\u00b3 kg\u207b\u00b9 of dry air [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26</p>\n\n<p>Notes:\n    In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26\n    The factor 144 is for the conversion of Psi = lb in\u207b\u00b2 to lb ft\u207b\u00b2.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">HumRatio</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetTDryBulbFromMoistAirVolumeAndHumRatio", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetTDryBulbFromMoistAirVolumeAndHumRatio", "kind": "function", "doc": "<p>Return dry-bulb temperature given moist air specific volume, humidity ratio, and pressure.</p>\n\n<p>Args:\n    MoistAirVolume: Specific volume of moist air in ft\u00b3 lb\u207b\u00b9 of dry air [IP] or in m\u00b3 kg\u207b\u00b9 of dry air [SI]\n    HumRatio : Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26</p>\n\n<p>Notes:\n    In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26\n    The factor 144 is for the conversion of Psi = lb in\u207b\u00b2 to lb ft\u207b\u00b2.\n    Based on the <code>GetMoistAirVolume</code> function, rearranged for dry-bulb temperature.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">MoistAirVolume</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">HumRatio</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetMoistAirDensity", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetMoistAirDensity", "kind": "function", "doc": "<p>Return moist air density given humidity ratio, dry bulb temperature, and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    HumRatio : Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    MoistAirDensity: Moist air density in lb ft\u207b\u00b3 [IP] or kg m\u207b\u00b3 [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 11</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">HumRatio</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetStandardAtmPressure", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetStandardAtmPressure", "kind": "function", "doc": "<p>Return standard atmosphere barometric pressure, given the elevation (altitude).</p>\n\n<p>Args:\n    Altitude: Altitude in ft [IP] or m [SI]</p>\n\n<p>Returns:\n    Standard atmosphere barometric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 3</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Altitude</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetStandardAtmTemperature", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetStandardAtmTemperature", "kind": "function", "doc": "<p>Return standard atmosphere temperature, given the elevation (altitude).</p>\n\n<p>Args:\n    Altitude: Altitude in ft [IP] or m [SI]</p>\n\n<p>Returns:\n    Standard atmosphere dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Reference:\n    ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 4</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Altitude</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetSeaLevelPressure", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetSeaLevelPressure", "kind": "function", "doc": "<p>Return sea level pressure given dry-bulb temperature, altitude above sea level and pressure.</p>\n\n<p>Args:\n    StationPressure : Observed station pressure in Psi [IP] or Pa [SI]\n    Altitude: Altitude in ft [IP] or m [SI]\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Returns:\n    Sea level barometric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Reference:\n    Hess SL, Introduction to theoretical meteorology, Holt Rinehart and Winston, NY 1959,\n    ch. 6.5; Stull RB, Meteorology for scientists and engineers, 2nd edition,\n    Brooks/Cole 2000, ch. 1.</p>\n\n<p>Notes:\n    The standard procedure for the US is to use for TDryBulb the average\n    of the current station temperature and the station temperature from 12 hours ago.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">StationPressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Altitude</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.GetStationPressure", "modulename": "otters.wrangle.psychrometrics", "qualname": "GetStationPressure", "kind": "function", "doc": "<p>Return station pressure from sea level pressure.</p>\n\n<p>Args:\n    SeaLevelPressure : Sea level barometric pressure in Psi [IP] or Pa [SI]\n    Altitude: Altitude in ft [IP] or m [SI]\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]</p>\n\n<p>Returns:\n    Station pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Reference:\n    See 'GetSeaLevelPressure'</p>\n\n<p>Notes:\n    This function is just the inverse of 'GetSeaLevelPressure'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">SeaLevelPressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Altitude</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.CalcPsychrometricsFromTWetBulb", "modulename": "otters.wrangle.psychrometrics", "qualname": "CalcPsychrometricsFromTWetBulb", "kind": "function", "doc": "<p>Utility function to calculate humidity ratio, dew-point temperature, relative humidity,\nvapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\ndry-bulb temperature, wet-bulb temperature, and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    TWetBulb : Wet-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]\n    Dew-point temperature in \u00b0F [IP] or \u00b0C [SI]\n    Relative humidity in range [0, 1]\n    Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    Moist air enthalpy in Btu lb\u207b\u00b9 [IP] or J kg\u207b\u00b9 [SI]\n    Specific volume of moist air in ft\u00b3 lb\u207b\u00b9 [IP] or in m\u00b3 kg\u207b\u00b9 [SI]\n    Degree of saturation [unitless]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">TWetBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.CalcPsychrometricsFromTDewPoint", "modulename": "otters.wrangle.psychrometrics", "qualname": "CalcPsychrometricsFromTDewPoint", "kind": "function", "doc": "<p>Utility function to calculate humidity ratio, wet-bulb temperature, relative humidity,\nvapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\ndry-bulb temperature, dew-point temperature, and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    TDewPoint : Dew-point temperature in \u00b0F [IP] or \u00b0C [SI]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]\n    Wet-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    Relative humidity in range [0, 1]\n    Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    Moist air enthalpy in Btu lb\u207b\u00b9 [IP] or J kg\u207b\u00b9 [SI]\n    Specific volume of moist air in ft\u00b3 lb\u207b\u00b9 [IP] or in m\u00b3 kg\u207b\u00b9 [SI]\n    Degree of saturation [unitless]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">TDewPoint</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.psychrometrics.CalcPsychrometricsFromRelHum", "modulename": "otters.wrangle.psychrometrics", "qualname": "CalcPsychrometricsFromRelHum", "kind": "function", "doc": "<p>Utility function to calculate humidity ratio, wet-bulb temperature, dew-point temperature,\nvapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\ndry-bulb temperature, relative humidity and pressure.</p>\n\n<p>Args:\n    TDryBulb : Dry-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    RelHum : Relative humidity in range [0, 1]\n    Pressure : Atmospheric pressure in Psi [IP] or Pa [SI]</p>\n\n<p>Returns:\n    Humidity ratio in lb_H\u2082O lb_Air\u207b\u00b9 [IP] or kg_H\u2082O kg_Air\u207b\u00b9 [SI]\n    Wet-bulb temperature in \u00b0F [IP] or \u00b0C [SI]\n    Dew-point temperature in \u00b0F [IP] or \u00b0C [SI].\n    Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    Moist air enthalpy in Btu lb\u207b\u00b9 [IP] or J kg\u207b\u00b9 [SI]\n    Specific volume of moist air in ft\u00b3 lb\u207b\u00b9 [IP] or in m\u00b3 kg\u207b\u00b9 [SI]\n    Degree of saturation [unitless]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TDryBulb</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">RelHum</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">Pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.time_tools", "modulename": "otters.wrangle.time_tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "otters.wrangle.time_tools.str2dt", "modulename": "otters.wrangle.time_tools", "qualname": "str2dt", "kind": "function", "doc": "<p>Finds the timestamp in a dataframe, translates it to_datetime, renames it \"Timestamp\", and sets it as the index\nBumps the index to the first column if it isn't a timestamp</p>\n\n<p>Parameters:\ndf: DataFrame, required\ntimeCol: string, Default: empty</p>\n\n<p>Returns: DataFrame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">timeCol</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">drop</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">datetime_args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.time_tools.time2timedelta", "modulename": "otters.wrangle.time_tools", "qualname": "time2timedelta", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">&#39;%H%M&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.time_tools.getLastNWeeks", "modulename": "otters.wrangle.time_tools", "qualname": "getLastNWeeks", "kind": "function", "doc": "<p>Get the last n weeks of data starting this past 'weekday' where (0=Monday, 6=Sunday)\nIt's important that the timestamp is already in the index</p>\n\n<p>Parameters:\ndf: DataFrame, required\nn: int, required\nweekday: int, Default 0 (0=Monday, 6=Sunday)</p>\n\n<p>Returns: DataFrame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">weekday</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">hour</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">minute</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.time_tools.overlayPast", "modulename": "otters.wrangle.time_tools", "qualname": "overlayPast", "kind": "function", "doc": "<p>Run if you want to overlay last year's consumption on the graph. Controlled in the config.\nCurrently the figure is not supplied/returned, that'll have to change for abstraction</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">nDays</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.time_tools.selectiveResample", "modulename": "otters.wrangle.time_tools", "qualname": "selectiveResample", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">freq</span>, </span><span class=\"param\"><span class=\"n\">meanCols</span>, </span><span class=\"param\"><span class=\"n\">sumCols</span>, </span><span class=\"param\"><span class=\"n\">colOrder</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.wrangler", "modulename": "otters.wrangle.wrangler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "otters.wrangle.wrangler.gapAndIsland", "modulename": "otters.wrangle.wrangler", "qualname": "gapAndIsland", "kind": "function", "doc": "<p>Takes an np.series data type (ie. a df single column)\nreturns the entire column broken up into sections where all the numbers are the same. \nGood for iterating on an events column or tracking flags. </p>\n\n<p>new: dfCol can be df with one column or series</p>\n\n<p><strong>Parameters:</strong>  </p>\n\n<blockquote>\n  <p><strong>dfCol: <em>a single df column or series, Required</em></strong>  </p>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>Series</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dfCol</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.wrangler.mergeCloseEvents", "modulename": "otters.wrangle.wrangler", "qualname": "mergeCloseEvents", "kind": "function", "doc": "<p>Merges events that are close so we don't get bunches of events. Not entirely necessary but it makes it cleaner. \nRecursive function, so it takes each event and calculates if it's within \"mergeWithinHours\" (in hours) of the last event. \nIf so it adds this event to the last event and deletes this event.\nreturns the new list of events</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">events</span>, </span><span class=\"param\"><span class=\"n\">mergeWithinHours</span><span class=\"o\">=</span><span class=\"mi\">12</span>, </span><span class=\"param\"><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.wrangler.merge_dfs", "modulename": "otters.wrangle.wrangler", "qualname": "merge_dfs", "kind": "function", "doc": "<p>Merge 2 or more dfs where you have some overlapping data. <br />\nKeeps the values randomly as far as I can tell, though it drops nan values</p>\n\n<p><strong>Parameters:</strong>  </p>\n\n<blockquote>\n  <p><strong>dfs: <em>list of DataFrames/Series, Required</em></strong>  </p>\n  \n  <blockquote>\n    <p>It will take any number of dfs</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>Merged DataFrame</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dfs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.wrangler.merge_df_cols", "modulename": "otters.wrangle.wrangler", "qualname": "merge_df_cols", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.wrangler.compare_lists", "modulename": "otters.wrangle.wrangler", "qualname": "compare_lists", "kind": "function", "doc": "<p>IN DEVELOPMENT\nI orifinally used this in Agg Data fro ABI to get all the valid cols from a list in a df. it's easier to just show the code: <br />\n<code>sumCols = [col for col in df.columns if compareList(list(col), sumCols)]</code>  </p>\n\n<p>I think this would have ustility in matching a combo of strings against a series, but I didn't use it that way. </p>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>boolean</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">strings</span>, </span><span class=\"param\"><span class=\"n\">patterns</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.wrangler.find_strs", "modulename": "otters.wrangle.wrangler", "qualname": "find_strs", "kind": "function", "doc": "<p>Find all the unique strings in a series. <br />\nUsefull for finding string errors in an otherwise numeric column</p>\n\n<p>Normally you would want to search all the string columns in a df. YOu can jsut loop over all the columns with the type <code>object</code>  </p>\n\n<p><strong>Parameters:</strong>  </p>\n\n<blockquote>\n  <p><strong>S: <em>Series, Required</em></strong>  </p>\n</blockquote>\n\n<p><strong>Returns:</strong>  </p>\n\n<blockquote>\n  <p><strong>list</strong></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">S</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "otters.wrangle.wrangler.two_letter_month_to_number", "modulename": "otters.wrangle.wrangler", "qualname": "two_letter_month_to_number", "kind": "function", "doc": "<p>Undocumented <br />\nSource: C:/Users/LucaLafontaine/AKONOVIA/EMO - Documents/002-ALCOVI/22-673 VSL - Ajustement Lufa/1-Intrant/Factures/\u00c9nergir/read_JCI_data.ipynb</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">date</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();